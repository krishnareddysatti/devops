#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

node {
	properties([
		[$class: 'BuildDiscarderProperty', strategy:
			[$class: 'LogRotator', numToKeepStr: '10']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'GIT_BRANCH', description: ' Branch Name', defaultValue: "feature/dev"),
			booleanParam(name: 'GIT_TAG', defaultValue: false, 	description: 'Tagging required or not')
		]),
		pipelineTriggers([ cron('H 6,11 * * *') ])
	])

	Utils utils = new Utils()
	try {
		// =========== USER DEFINED VARS ===========
		def mvnHome = tool name: "Maven_V3"
		env.PATH = "${mvnHome}/bin:${env.PATH}"

		def workspacePath = pwd()		
		def commonRepoUrl = "ssh://git@innersource.accenture.com/appq/common.git"
		def applicationDir = "common"
		
		// =========== USER DEFINED VARS ===========

		checkout(applicationDir, commonRepoUrl, GIT_BRANCH, utils)
		build(applicationDir)
		sonarScanner(applicationDir)
		allCodeQualityTests(utils)
		tagBranch(applicationDir, commonRepoUrl, GIT_TAG, utils)

	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		currentBuild.result = 'FAILURE'
		throw error
	} finally {
		// Success or failure, always send notifications
		utils.sendNotification(currentBuild.result)
	}
}

def checkout(applicationDir, commonRepoUrl, branchName, utils) {
	stage('Git Checkout') { utils.commonAppCheckout(applicationDir, commonRepoUrl, branchName) }
}

def build(applicationDir){
	stage ('Maven Build') {
		dir(applicationDir) { sh "mvn clean install -Dmaven.test.skip=true" }
	}
}

def sonarScanner(applicationDir) {
	//********* Configure a webhook in your SonarQube server pointing to <your Jenkins instance>/sonarqube-webhook/ ********
	stage('SonarQube Analysis') {
		dir(applicationDir) {
			withSonarQubeEnv('SonarQube_V7') { // SonarQube taskId is automatically attached to the pipeline context
				sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar" }
		}
	}
}

def allCodeQualityTests(utils) {
	stage("SonarQube Quality Gate") { utils.processQualityGate() }
}

def tagBranch(applicationDir, commonRepoUrl, GIT_TAG, utils) {
	if (GIT_TAG.toBoolean()) {
		stage('Tag Branch') {
			//Fetching Released Version from POM.xml and appending BUILD_NUMBER
			def taggedVersion = utils.getReleasedVersion(applicationDir) + ".${BUILD_NUMBER}"
			echo "taggedVersion: ${taggedVersion}"

			utils.tagBranch(applicationDir, commonRepoUrl, taggedVersion)
		}
	}
}