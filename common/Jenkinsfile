#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

//node("jenkins-slave")
node {
	properties([
		[$class: 'BuildDiscarderProperty', strategy:
			[$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'GIT_BRANCH', description: ' Branch Name', defaultValue: "feature/dev"),
			booleanParam(name: 'GIT_TAG', defaultValue: false, 	description: 'Tagging required or not')
		]),
		pipelineTriggers([ cron('TZ=IST
								 H 12,16 * * 1-5') ])
	])

//properties([pipelineTriggers([cron('H 23 * * *')])])

//pollSCM('H/15 * * * *'),
			//pollSCM('* * * * *'),
			//cron('@daily')
			// Trigger build @12 and 4 PM on Week Days
			//cron('0 12, 16 * * 1-5')

	Utils utils = new Utils()
	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		def mvnHome = tool name: "Maven_V3"
		env.PATH = "${mvnHome}/bin:${env.PATH}"
		def commonRepoUrl = "ssh://git@innersource.accenture.com/appq/common.git"
		def applicationDir = "common"
		def branchName = "${GIT_BRANCH}"
		// =========== USER DEFINED VARS ===========

		checkout(applicationDir, commonRepoUrl, branchName)
		build(applicationDir)
		sonarScanner(applicationDir)
		allCodeQualityTests(utils)
		def taggedVersion = utils.getReleasedVersion(applicationDir) + ".${BUILD_NUMBER}"
		echo "taggedVersion: ${taggedVersion}"
		tagBranch(applicationDir, commonRepoUrl, taggedVersion,GIT_TAG, utils)

	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		currentBuild.result = 'FAILURE'
		throw error
	} finally {
		// Success or failure, always send notifications
		utils.sendNotification(currentBuild.result)
	}
}


def checkout(applicationDir, commonRepoUrl, branchName){
	stage('Git Checkout') {
		deleteDir()
		echo "Checkout in progress..."
		dir(applicationDir) {
			git branch: '${GIT_BRANCH}',
			credentialsId: 'git-repo-ssh-access',
			url: "${commonRepoUrl}"
		}
	}
}

def build(applicationDir){
	stage ('Maven Build') {
		dir(applicationDir) { sh "mvn clean install -Dmaven.test.skip=true" }
	}
}

def sonarScanner(applicationDir) {
	//********* Configure a webhook in your SonarQube server pointing to <your Jenkins instance>/sonarqube-webhook/ ********
	stage('SonarQube Analysis') {
		dir(applicationDir) {
			withSonarQubeEnv('SonarQube_V7') { // SonarQube taskId is automatically attached to the pipeline context
				sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar" }
		}
	}
}

def allCodeQualityTests(utils) {
	stage("SonarQube Quality Gate") { utils.processQualityGate() }
}

def tagBranch(applicationDir, commonRepoUrl, taggedVersion,GIT_TAG, utils) {
	if (GIT_TAG.toBoolean()) {
		stage('Tag Branch') {
			utils.tagBranch(applicationDir, commonRepoUrl, taggedVersion)
		}
	}
}