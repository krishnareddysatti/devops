#!/usr/bin/env groovy

node {
	properties([
		[$class: 'BuildDiscarderProperty', strategy:
			[$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			choice(choices: ["master", "develop"].join("\n"), description: 'API Branch Name', name: 'API_GIT_BRANCH'),
			choice(choices: ["master", "develop"].join("\n"), description: 'Distro Branch Name', name: 'DISTRO_GIT_BRANCH'),
			booleanParam(name: 'GIT_TAG', defaultValue: false, description: 'Tagging required or not'),
			booleanParam(name: 'GIT_IMAGE_PUSH', defaultValue: false,	description: 'Image store required or not')
		]),
		pipelineTriggers([
			//pollSCM('H/15 * * * *'),
			//pollSCM('* * * * *'),
			//cron('@daily')
		])
	])

	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		def mvnHome = tool name: "Maven_V3"
		env.PATH = "${mvnHome}/bin:${env.PATH}"
		def apiRepoUrl = 'ssh://git@innersource.accenture.com/appq/demandplannerapi.git'
		def distroRepoUrl = 'ssh://git@innersource.accenture.com/appq/distro.git'
		def distroDirPath = "/tmp/jenkins/distro"
		def artifactName = getArtifact()
		// =========== USER DEFINED VARS ===========

		stage('Git Checkout') {
			deleteDir()
			echo "Checkout in progress..."
			dir('demandplannerapi') {
				git branch: '${API_GIT_BRANCH}',
				credentialsId: 'git-repo-ssh-access',
				url: 'ssh://git@innersource.accenture.com/appq/demandplannerapi.git'
			}

			// Check for directory
			if(!fileExists(distroDirPath))
			{
				sh "whoami"
				echo "${distroDirPath} doesn't exist.Continue cloning ..."

				dir(distroDirPath){
					git branch: '${DISTRO_GIT_BRANCH}',
					credentialsId: 'git-repo-ssh-access',
					url: 'ssh://git@innersource.accenture.com/appq/distro.git'
				}
			}
			else {
				echo "${distroDirPath} is already exist.Continue updating ..."
				sshagent (credentials: ['git-repo-ssh-access']) {
					dir(distroDirPath) { sh "git pull origin HEAD:master" }
				}
			}
		}

		stage ('Maven Build') {
			dir('demandplannerapi') { sh "mvn -Dmaven.test.failure.ignore clean package" }
		}

		stage ('Junit Test') { dir('demandplannerapi') {sh "mvn test" }}

		stage('SonarQube Analysis') {
			dir('demandplannerapi') {
				withSonarQubeEnv('SonarQube_V7') { // SonarQube taskId is automatically attached to the pipeline context
					sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar" }
			}
		}

		// Configure a webhook in your SonarQube server pointing to <your Jenkins instance>/sonarqube-webhook/
		stage("SonarQube Quality Gate") {
			// Just in case something goes wrong, pipeline will be killed after a timeout
			timeout(time: 2, unit: 'MINUTES') {
				def qualityGate = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
				if (qualityGate.status != 'OK') {
					//error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
					println("SonarQube Quality Gate Failed.failure: ${qualityGate.status}")
				} else
				{
					println("SonarQube Quality Gate Passed")
				}
			}
		}

		stage('Docker Build'){
			try {
				sh 'sudo docker rmi -f $(docker images -f "dangling=true" -q)'
			} catch (err) {
				echo "Trying to remove dangling Images: ${err}"
			}


			try {
				sh 'sudo docker rmi -f $(docker images | grep ${artifactName} | awk \"{print $3}\")'
			} catch (err) {
				echo "Trying remove ${artifactName}: ${err}"
			}

			dir('demandplannerapi') {
				echo "Starting Docker Image Creation..."
				sh "mvn docker:build"
			}
			echo "Docker Image Creation Complted..."
		}

		if (GIT_IMAGE_PUSH.toBoolean()) {
			sshagent (credentials: ['git-repo-ssh-access']) {

				dir ('demandplannerapi') {
					sh 'sudo docker save -o target/productplannerapi.tar ${artifactName}'
					echo "Copy Process Started..."
					sh "cp -rf target/productplannerapi.tar ${workspacePath}/distro"
				}



				echo "Copy Process Started..."
				dir ('demandplannerapi') { sh "cp -rf target/docker ${workspacePath}/distro"}
				echo "Copy Process Completed..."

				dir ('distro') {
					sh 'git remote set-url origin ssh://git@innersource.accenture.com/appq/distro.git'
					sh "git pull origin master"
					sh "git add docker/Dockerfile docker/productplannerapi-1.0.0-SNAPSHOT.jar"
					sh 'git commit -m "Jenkins Job:${JOB_NAME} pushing Jar file" '
					sh "git push origin HEAD:master"
				}

				if (GIT_TAG.toBoolean()) {
					stage('Tag Branch'){
						dir('demandplannerapi') {
							//archiveArtifacts '/*.*'
							sh "ls -l"
							sh "git remote set-url origin ssh://git@innersource.accenture.com/appq/productplannerapi.git"
							//sh "git tag ${IMAGE_BRANCH_PREFIX}-${BUILD_NUMBER}"
							sh "git tag demandplanner-v1"
							sh "git push --tags"
						}
					}
				}
			}
		}
	}catch (Error) {
		println Error
	}
}

def getReleasedVersion() {
	def matcher = readFile('demandplannerapi/pom.xml') =~ '<version>(.+?)</version>'
	matcher ? matcher[0][1] : null
}

def getArtifact() {
	def matcher = readFile('demandplannerapi/pom.xml') =~ '<artifactId>(.+?)</artifactId>'
	matcher ? matcher[0][1] : null
}
