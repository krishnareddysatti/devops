#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

// =========== GLOBAL VARS ===========
def dockerRegistryIP
// =========== GLOBAL VARS ===========

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'MAJOR_VERSION', description: '', defaultValue: "3", trim: true),
			string(name: 'MINOR_VERSION', description: '', defaultValue: "12-10", trim: true),
			string(name: 'GIT_BRANCH', description: 'API Branch Name', defaultValue: "",trim: true),
			string(name: 'ENV', description: 'Properties Environment', defaultValue: "dev",trim: true),
			string(name: 'VM_IP', description: 'Plese provide IP', defaultValue: "ec2dp-dev1.qualcomm.com", trim: true),
			string(name: 'VM_SERVICE_ACCOUNT', description: 'Service Account User', defaultValue: "", trim: true),
			string(name: 'DOCKER_PRIVATE_REGISTRY_IP', description: 'Docker Private Registry', defaultValue: "ec2dp-devops2.qualcomm.com", trim: true)
		])
	]
	//projectProperties.add(pipelineTriggers([upstream(threshold: hudson.model.Result.SUCCESS,upstreamProjects: "common")]))
	properties(projectProperties)

	Utils utils = new Utils()
	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		echo "workspacePath: ${workspacePath}"

		def mvnHome = tool name: "Maven_V3"
		env.PATH = "${mvnHome}/bin:${env.PATH}"

		def priorityConfigRepoUrl = 'https://A18591DIRPdp@innersource.accenture.com/scm/appq/priorityconfigapi.git'
		def applicationDir = "priorityconfig"
		def serverIP = "${VM_IP}"
		dockerRegistryIP ="${DOCKER_PRIVATE_REGISTRY_IP}"
		def releasedVersion
		def serviceAccount = "${VM_SERVICE_ACCOUNT}"
		// =========== USER DEFINED VARS ===========

		if (!serverIP?.trim() || !GIT_BRANCH?.trim() || !ENV?.trim() || !serviceAccount?.trim() || !dockerRegistryIP?.trim() || !MAJOR_VERSION?.trim() || !MINOR_VERSION?.trim()) {
			currentBuild.result = 'FAILURE'
			error 'Missing required Build Parameters'
		}


		checkout(applicationDir, GIT_BRANCH, priorityConfigRepoUrl, utils)
		// Since artifactName and releasedVersion fetching from POM.xml, should execute after cloning the repo.
		def artifactName = utils.getArtifact(applicationDir)

		
		// Keep below code for future purpose
		/*
		 dir(applicationDir) {
		 releasedVersion = sh (
		 script: """ mvn help:evaluate -Dexpression=project.version -Drevision=${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER} | grep -e '^[^\\[]'  """,
		 returnStdout: true
		 ).trim()
		 }
		 echo "releasedVersion: ${releasedVersion}"
		 */

		releasedVersion = "${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"
		currentBuild.displayName = "${artifactName}.${releasedVersion}"

		build(applicationDir, releasedVersion)
		allTests(applicationDir, releasedVersion)
		processCodeCoverage(applicationDir, releasedVersion, utils)
		sonarScanner(applicationDir, releasedVersion, utils)
		allCodeQualityTests(utils)
		dockerBuild(applicationDir, artifactName,  releasedVersion, utils)
		utils.pushImage(artifactName, releasedVersion, dockerRegistryIP)             					// Push Image to Private Repository
		utils.removeImages(artifactName)  																// To clean images created on Jenkins BOX
	
	/*
		stage("deploy to : ${serverIP}"){
			utils.stopContainer(artifactName, serverIP, serviceAccount)
			dockerClean(artifactName, serverIP, utils, serviceAccount)											// To clean images created on VM BOX
			deployImage(artifactName, releasedVersion, "${ENV}", serverIP, utils, dockerRegistryIP, serviceAccount)
			subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' on ${serverIP}"
			bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] on ${serverIP}':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
			utils.sendEmailNotification(subjectText, bodyText)
		}
	*/
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		// currentBuild.result = 'FAILURE'
		subjectText = "JENKINS Notification: FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
		throw error
	}
}

//--------------------------------------------------------- Utility Methods START ---------------------------------------------------------
def checkout(applicationDir, branchName, priorityConfigRepoUrl, utils) {
	stage('Git Checkout') {
		utils.sourceCodeCheckout(applicationDir, branchName, priorityConfigRepoUrl)
	}
}

def build(applicationDir, releasedVersion) {
	stage ('Maven Build') {
		dir(applicationDir) { sh "mvn clean install -Dmaven.test.skip=true -Drevision=${releasedVersion}" }
	}
}

def allTests(applicationDir, releasedVersion) {
	stage ('Junit Test') { dir(applicationDir) {sh "mvn test -Drevision=${releasedVersion}" }}
}

def processCodeCoverage(applicationDir, releasedVersion, utils) {
	stage('Cobertura Code Coverage') {
		utils.processCodeCoverage(applicationDir, releasedVersion)

	}
}

def sonarScanner(applicationDir, releasedVersion, utils) {
	stage('SonarQube Analysis') {
		utils.sonarScanner(applicationDir, releasedVersion)
	}
}

def allCodeQualityTests(utils) {
	stage("SonarQube Quality Gate") { utils.processQualityGate() }
}

def dockerBuild(applicationDir, artifactName,  releasedVersion, utils) {
	stage('Docker Build'){
		utils.apiDockerBuild(applicationDir, artifactName, releasedVersion)
	}
}

def dockerClean(artifactName, serverIP, utils, serviceAccount) {
	utils.removeDanglingImages(artifactName, serverIP, serviceAccount)
}

def deployImage(artifactName, releasedVersion, ENV, destinationIP, utils, dockerRegistryIP, serviceAccount) {
	utils.promotePCAPIToEnv(artifactName, releasedVersion, ENV, destinationIP, dockerRegistryIP, serviceAccount)
}
//--------------------------------------------------------- Utility Methods END ---------------------------------------------------------