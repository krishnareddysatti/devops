#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

//node("jenkins-slave")
node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'GIT_BRANCH', description: 'API Branch Name', defaultValue: "master"),
			choice(choices: ["dev", "qa"].join("\n"), description: 'Properties Environment', name: 'PROP_ENV'),
			string(name: 'DESTINATION_IP', description: 'IP of promotion env', defaultValue: "10.0.31.242"),
			booleanParam(name: 'GIT_IMAGE_PUSH', defaultValue: false,	description: 'Save image to a tar archive'),
			booleanParam(name: 'GIT_TAG', defaultValue: false, description: 'Tagging required or not')
		]),
	]
	projectProperties.add(pipelineTriggers([upstream(threshold: hudson.model.Result.SUCCESS,upstreamProjects: "common")]))
	//projectProperties.add(pipelineTriggers([cron('H 21 * * *')]))

	properties(projectProperties)

	Utils utils = new Utils()

	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		echo "workspacePath: ${workspacePath}"
		def mvnHome = tool name: "Maven_V3"
		env.PATH = "${mvnHome}/bin:${env.PATH}"
		def apiRepoUrl = 'ssh://git@innersource.accenture.com/appq/demandplannerapi.git'
		def distroRepoUrl = 'ssh://git@innersource.accenture.com/appq/distro_api.git'
		def distroDirPath = "/tmp/jenkins/distro_api"
		def applicationDir = "demandplannerapi"
		def branchName = "${GIT_BRANCH}"
		def destinationIP = "${DESTINATION_IP}"
		// =========== USER DEFINED VARS ===========

		checkout(applicationDir, branchName, apiRepoUrl, distroDirPath, distroRepoUrl,utils)
			// Since artifactName and releasedVersion fetching from POM.xml, should execute after cloning the repo.
			def artifactName = utils.getArtifact("demandplannerapi")
			//def releasedVersion = utils.getReleasedVersion("demandplannerapi")
			printf 'VERSION=${project.version}' | mvn help:evaluate -Dv=${BUILD_NUMBER} | grep '^VERSION=' | sed 's/^VERSION=//g'
			/*
			def  releasedVersion = sh (
			script: " 'VERSION=${project.version}' | mvn help:evaluate -Dv=${BUILD_NUMBER} | grep \'^VERSION=\' | sed \'s/^VERSION=//g\'",
			returnStdout: true
			).trim()*/
			
			echo "releasedVersion: ${releasedVersion}"
		//def version="mvn help:evaluate -Dexpression=project.version -Dv=${BUILD_NUMBER} -q -DforceStdout"
		//echo "version: ${version}"
		build()
		allTests()
        sonarScanner()
        allCodeQualityTests(utils)
		dockerClean(artifactName,utils)
		dockerBuild()
        saveImage(applicationDir, distroDirPath, artifactName, releasedVersion,GIT_IMAGE_PUSH, utils)
		tagBranch(applicationDir, apiRepoUrl, releasedVersion,GIT_TAG, utils)
        dev(artifactName, releasedVersion, PROP_ENV, utils)
		loadImage(distroDirPath, artifactName, releasedVersion, destinationIP,GIT_IMAGE_PUSH, utils)	
		stage('deploy to QA'){
			timeout(activity: true, time: 20, unit: 'SECONDS') {
	 			input message: 'Deploy to QA Env?', ok: 'Deploy'
	 		}
			utils.promoteAPIToEnv(artifactName, releasedVersion, PROP_ENV, destinationIP)
		}
		
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		currentBuild.result = 'FAILURE'
		throw error
	} finally {
		// Success or failure, always send notifications
		utils.sendNotification(currentBuild.result)
	}
}


def checkout(applicationDir, branchName, apiRepoUrl, distroDirPath, distroRepoUrl,utils) {
	stage('Git Checkout') {
			utils.sourceCodeCheckout(applicationDir, branchName, apiRepoUrl, distroDirPath, distroRepoUrl)
		}
}

def build() {
	stage ('Maven Build') {
			dir('demandplannerapi') { sh "mvn clean install -Dmaven.test.skip=true -Dv=${BUILD_NUMBER}" }
		}
}

def allTests() {
	stage ('Junit Test') { dir('demandplannerapi') {sh "mvn test -Dv=${BUILD_NUMBER}" }}
}

def sonarScanner() {
		stage('SonarQube Analysis') {
			dir('demandplannerapi') {
				withSonarQubeEnv('SonarQube_V7') { // SonarQube taskId is automatically attached to the pipeline context
					sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar -Dv=${BUILD_NUMBER}" }
			}
		}
}

def allCodeQualityTests(utils) {
	stage("SonarQube Quality Gate") { utils.processQualityGate() }
}

def dockerClean(artifactName,utils) {
	stage('Docker Clean'){ utils.removeImages(artifactName) }
}

def dockerBuild() {
	stage('Docker Build'){
			dir('demandplannerapi') {
				echo "Starting Docker Image Creation..."
				sh "mvn docker:build -Dv=${BUILD_NUMBER}"
				echo "Docker Image Creation Complted..."
			}
		}
}

def saveImage(applicationDir, distroDirPath, artifactName, releasedVersion,GIT_IMAGE_PUSH, utils) {
	if (GIT_IMAGE_PUSH.toBoolean()) {
			stage('Save Image to Tar Archive') {
				utils.pushImageToRepo(applicationDir, distroDirPath, artifactName, releasedVersion)
			}
		}
}

def tagBranch(applicationDir, apiRepoUrl, releasedVersion,GIT_TAG, utils) {
	if (GIT_TAG.toBoolean()) {
			stage('Tag Branch') {
				utils.tagBranch(applicationDir, apiRepoUrl, releasedVersion)
			}
			sh "docker images"
		}
}

def dev(artifactName, releasedVersion, PROP_ENV, utils) {
		stage('deploy to DEV'){
			utils.deployAPIToDev(artifactName, releasedVersion, PROP_ENV)
		}
}

def loadImage(distroDirPath, artifactName, releasedVersion, destinationIP,GIT_IMAGE_PUSH, utils) {
		stage('load Image'){
			//if (GIT_IMAGE_PUSH.toBoolean()) {
				utils.loadImage(distroDirPath, artifactName, releasedVersion, destinationIP)
			//}
		}
}