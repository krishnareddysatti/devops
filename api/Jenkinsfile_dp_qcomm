#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

// =========== GLOBAL VARS ===========
def dockerRegistryIP
// =========== GLOBAL VARS ===========

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'MAJOR_VERSION', description: '', defaultValue: "3", trim: true),
			string(name: 'MINOR_VERSION', description: '', defaultValue: "12-10", trim: true),
			string(name: 'GITHUB_USER_NAME', description: 'qualcomm git hub user name', defaultValue: "c-rsatti", trim: true),
			string(name: 'GIT_BRANCH', description: 'API Branch Name', defaultValue: "",trim: true),
			booleanParam(name: 'GIT_TAG', defaultValue: false, description: 'Tagging required or not'),
			string(name: 'DOCKER_PRIVATE_REGISTRY_IP', description: 'Docker Private Registry', defaultValue: "ec2dp-devops2.qualcomm.com", trim: true)
		])
	]
	//projectProperties.add(pipelineTriggers([upstream(threshold: hudson.model.Result.SUCCESS,upstreamProjects: "common")]))
	properties(projectProperties)

	Utils utils = new Utils()
	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		echo "workspacePath: ${workspacePath}"

		def mvnHome = tool name: "Maven_V3"
		env.PATH = "${mvnHome}/bin:${env.PATH}"

		def apiRepoUrl = "https://A18591DIRPdp@innersource.accenture.com/scm/appq/demandplannerapi.git"
		def applicationDir = "demandplannerapi"
		dockerRegistryIP ="${DOCKER_PRIVATE_REGISTRY_IP}"
		// =========== USER DEFINED VARS ===========

		if (!GIT_BRANCH?.trim() || !dockerRegistryIP?.trim() || !MAJOR_VERSION?.trim() || !MINOR_VERSION?.trim()) {
			currentBuild.result = 'FAILURE'
			error 'Missing required Build Parameters'
		}


		checkout(applicationDir, GIT_BRANCH, apiRepoUrl, utils)
		// Since artifactName and releasedVersion fetching from POM.xml, should execute after cloning the repo.
		artifactName = utils.getArtifact(applicationDir)

		
		// Keep below code for future purpose
		/*
		 dir(applicationDir) {
		 releasedVersion = sh (
		 script: """ mvn help:evaluate -Dexpression=project.version -Drevision=${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER} | grep -e '^[^\\[]'  """,
		 returnStdout: true
		 ).trim()
		 }
		 echo "releasedVersion: ${releasedVersion}"
		 */
		releasedVersion = "${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"
		currentBuild.displayName = "${artifactName}:${releasedVersion}"

		build(applicationDir, releasedVersion)
		allTests(applicationDir, releasedVersion)
		processCodeCoverage(applicationDir, releasedVersion, utils)
		sonarScanner(applicationDir, releasedVersion, utils)
		allCodeQualityTests(utils)
		dockerBuild(applicationDir, artifactName,  releasedVersion, utils)
		tagBranch(applicationDir, apiRepoUrl, releasedVersion, GIT_TAG, utils)
		utils.pushImage(artifactName, releasedVersion, dockerRegistryIP)             					// Push Image to Private Repository
		utils.removeImages(artifactName)  																// To clean images created on Jenkins BOX
		subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		// currentBuild.result = 'FAILURE'
		subjectText = "JENKINS Notification: FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
		throw error
	}
}
//--------------------------------------------------------- Utility Methods START ---------------------------------------------------------

def checkout(applicationDir, branchName, apiRepoUrl, utils) {
	stage('Git Checkout') {
		utils.sourceCodeCheckout(applicationDir, branchName, apiRepoUrl)
	}
}

def build(applicationDir, releasedVersion) {
	stage ('Maven Build') {
		dir(applicationDir) { sh "mvn clean install -Dmaven.test.skip=true -Drevision=${releasedVersion}" }
	}
}

def allTests(applicationDir, releasedVersion) {
	stage ('Junit Test') { dir(applicationDir) {sh "mvn test -Drevision=${releasedVersion}" }}
}

def processCodeCoverage(applicationDir, releasedVersion,utils ) {
	stage('Cobertura Code Coverage') {
		utils.processCodeCoverage(applicationDir, releasedVersion)
	}
}

def sonarScanner(applicationDir, releasedVersion, utils) {
	stage('SonarQube Analysis') {
		utils.sonarScanner(applicationDir, releasedVersion)
	}
}

def allCodeQualityTests(utils) {
	stage("SonarQube Quality Gate") { utils.processQualityGate() }
}

def dockerBuild(applicationDir, artifactName,  releasedVersion, utils) {
	stage('Docker Build'){
		utils.apiDockerBuild(applicationDir, artifactName, releasedVersion)
	}
}

def tagBranch(applicationDir, apiRepoUrl, releasedVersion, GIT_TAG, utils) {
	if (GIT_TAG.toBoolean()) {
		stage('Tag Branch') {
			utils.tagBranch(applicationDir, apiRepoUrl, releasedVersion)
		}
	}
}

//--------------------------------------------------------- Utility Methods END ---------------------------------------------------------