#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

String FALLBACK_SCRIPT = "return ['Error']"

def dpVersionNumber = "cat /product/jenkins/distro_api/version.txt".execute().text
//def list = multiline.readLines()

echo "${dpVersionNumber}"

String STUB_GIT_VERSION_SCRIPT = '''
def proc1 = ['/bin/bash', '-c', "/usr/bin/git ls-remote --heads ssh://git@innersource.accenture.com/appq/distro_api.git"].execute()
def proc2 = ['/bin/bash', '-c', "awk '{print \\$2}'"].execute()
def proc3 = ['/bin/bash', '-c', "sed s%^refs/heads/%%"].execute()
def proc4 = ['/bin/bash', '-c', "sort"].execute()

def all = proc1 | proc2 | proc3 | proc4
return all.text.readLines()
'''

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '5']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'PROD_BOX_IP', description: '', defaultValue: "10.0.31.242"),
			string(name: 'TEST', description: '', defaultValue: "~@ignore"),
			choice(name: 'APPLICATION_VERSION', choices:"${dpVersionNumber}", description: "Application Version"),
			    [$class           : 'ChoiceParameterDefinition',
                 dataProvider     : [$class : 'GroovyDataProvider',
                                     sandbox: false,
                                     script : STUB_GIT_VERSION_SCRIPT],
                 defaultValue     : 'master',
                 description      : 'Stub Git branch',
                 displayExpression: '',
                 name             : 'STUB_GIT_VERSION',
                 valueExpression  : '']
		])
	]

	properties(projectProperties)

	Utils utils = new Utils()

	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		echo "workspacePath: ${workspacePath}"
		def distroRepoUrl = 'ssh://git@innersource.accenture.com/appq/distro_api.git'
		distroDirPath =  "/product/jenkins/distro_api"
		def destinationIP = "${PROD_BOX_IP}"
		def releasedVersion = "${dpVersionNumber}"
		def artifactName = "${ARITFACT_NAME}"
		// =========== USER DEFINED VARS ===========

		echo "${STUB_GIT_VERSION_SCRIPT}"

		stage('Git Checkout') {
			utils.distroCheckout(distroDirPath, distroRepoUrl)
		}
		
		stage('Docker Clean'){ utils.removeDanglingImages(artifactName, destinationIP) }

		stage('deploy'){
			// TODO: PROP_ENV has to identify for production. currently passing empty
			utils.promoteAPIToEnv(artifactName, releasedVersion, "qa", destinationIP)
		}
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		currentBuild.result = 'FAILURE'
		throw error
	} finally {
		// Success or failure, always send notifications
		utils.sendNotification(currentBuild.result)
	}
	
}