#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'PROD_BOX_IP', description: '', defaultValue: "10.0.31.242", trim: true),
			string(name: 'APPLICATION_VERSION', description: '', defaultValue: "", trim: true)
		])
	]

	properties(projectProperties)

	Utils utils = new Utils()

	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		echo "workspacePath: ${workspacePath}"
		def distroRepoUrl = 'ssh://git@innersource.accenture.com/appq/distro_api.git'
		distroDirPath = "/product/jenkins/distro_api" 
		def artifactName = 'qualcomm-ms-demandplanner'
		def prodServerIPString = "${PROD_BOX_IP}"
		def releasedVersion = "${APPLICATION_VERSION}"
		// =========== USER DEFINED VARS ===========

		if (!prodServerIPString?.trim()) {
			error "Missing PROD server IP in Build Parameters"
		}

		stage('Git Checkout') {
			utils.distroCheckout(distroDirPath, distroRepoUrl)
		}

		for (String prodServerIP : prodServerIPString.split(",")) {
			dockerClean(artifactName, prodServerIP, utils)
			loadImage(distroDirPath, artifactName, releasedVersion, prodServerIP, utils)
			stage("deploy to PROD: ${prodServerIP}"){
				utils.stopContainer(artifactName, prodServerIP)
				deployImage(artifactName, releasedVersion, "prod", prodServerIP, utils)

				subjectText = "JENKINS Notification: Successful PROD Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' on ${prodServerIP}"
				bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] on ${prodServerIP}':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
				utils.sendEmailNotification(subjectText, bodyText)
			}
		}
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		// currentBuild.result = 'FAILURE'
		subjectText = "JENKINS Notification: FAILED PROD Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
		throw error
	}
}

//--------------------------------------------------------- Utility Methods START ---------------------------------------------------------

def dockerClean(artifactName, serverIP, utils) {
	//stage('Docker Clean'){
	utils.removeDanglingImages(artifactName, serverIP)
	//}
}

def loadImage(distroDirPath, artifactName, releasedVersion, destinationIP, utils) {
	//stage('load Image'){
	utils.loadImageInProd(distroDirPath, artifactName, releasedVersion, destinationIP)
	//}
}

def deployImage(artifactName, releasedVersion, PROP_ENV, destinationIP, utils) {
	utils.promoteAPIToEnv(artifactName, releasedVersion, PROP_ENV, destinationIP)
}

//--------------------------------------------------------- Utility Methods END ---------------------------------------------------------