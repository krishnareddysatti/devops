#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

String FALLBACK_SCRIPT = "return ['Error']"

def dpVersionNumber = "cat /product/jenkins/distro_api/version.txt".execute().text
//def list = multiline.readLines()

echo "${dpVersionNumber}"

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '5']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'PROD_BOX_IP', description: '', defaultValue: "10.0.31.242", trim: true),
			string(name: 'TEST', description: '', defaultValue: "~@ignore", trim: true),
			choice(name: 'APPLICATION_VERSION', choices:"${dpVersionNumber}", description: "Application Version")
		])
	]

	properties(projectProperties)

	Utils utils = new Utils()

	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		echo "workspacePath: ${workspacePath}"
		def distroRepoUrl = 'ssh://git@innersource.accenture.com/appq/distro_api.git'
		distroDirPath =  "/product/jenkins/distro_api"
		def destinationIP = "${PROD_BOX_IP}"
		def releasedVersion = "${APPLICATION_VERSION}"
		// TODO: discuss with suresh about versioning like application name better do not add "-": demandplanner-1.3.SNAPSHOT OR demandplanner-1.3.89 
		def artifactName = "${APPLICATION_VERSION}"
		// =========== USER DEFINED VARS ===========

		currentBuild.displayName = "${artifactName}.${releasedVersion}"
		
		stage('Git Checkout') {
			utils.distroCheckout(distroDirPath, distroRepoUrl)
		}
		
		stage('Docker Clean'){ utils.removeDanglingImages(artifactName, destinationIP) }

		stage('deploy'){
			// TODO: PROP_ENV has to identify for production. currently passing empty
			utils.promoteAPIToEnv(artifactName, releasedVersion, "qa", destinationIP)
		}
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		currentBuild.result = 'FAILURE'
		throw error
	} finally {
		// Success or failure, always send notifications
		utils.sendNotification(currentBuild.result)
	}
	
}