#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

// =========== GLOBAL VARS ===========
def artifactName, releasedVersion , qaServerIPString, userApprovalQAInput, qaReleaseCandidate, isQADeployApproved = true, dockerRegistryIP
// =========== GLOBAL VARS ===========

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'MAJOR_VERSION', description: '', defaultValue: "0", trim: true),
			string(name: 'MINOR_VERSION', description: '', defaultValue: "snapshot", trim: true),
			string(name: 'GIT_BRANCH', description: 'API Branch Name', defaultValue: "feature/dev",trim: true),
			string(name: 'DEV_BOX_IP', description: 'comma separated servers IP', defaultValue: "10.0.31.138", trim: true),
			booleanParam(name: 'QA_RELEASE_CANDIDATE', defaultValue: false, description: 'Promote to QA or Not'),
			string(name: 'QA_BOX_IP', description: 'comma separated servers IP', defaultValue: "10.0.31.242", trim: true),
			string(name: 'PRIVATE_REPO_IP', description: 'Docker Images Private Repo', defaultValue: "10.0.31.225", trim: true),
			booleanParam(name: 'GIT_TAG', defaultValue: false, description: 'Tagging required or not')
		])
	]
	//projectProperties.add(pipelineTriggers([upstream(threshold: hudson.model.Result.SUCCESS,upstreamProjects: "common")]))
	properties(projectProperties)

	Utils utils = new Utils()
	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		echo "workspacePath: ${workspacePath}"

		def mvnHome = tool name: "Maven_V3"
		env.PATH = "${mvnHome}/bin:${env.PATH}"

		def apiRepoUrl = 'ssh://git@innersource.accenture.com/appq/demandplannerapi.git'
		def applicationDir = "demandplannerapi"
		def devServerIPString = "${DEV_BOX_IP}"
		qaReleaseCandidate = "${QA_RELEASE_CANDIDATE}"
		qaServerIPString = "${QA_BOX_IP}"
		dockerRegistryIP ="${PRIVATE_REPO_IP}"
		// =========== USER DEFINED VARS ===========

		if (!devServerIPString?.trim()) {
			error "Missing DEV server IP in Build Parameters"
		}

		checkout(applicationDir, GIT_BRANCH, apiRepoUrl, utils)
		// Since artifactName and releasedVersion fetching from POM.xml, should execute after cloning the repo.
		artifactName = utils.getArtifact(applicationDir)

		dir(applicationDir) {
			releasedVersion = sh (
					script: """ mvn help:evaluate -Dexpression=project.version -Drevision=${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER} | grep -e '^[^\\[]'  """,
					returnStdout: true
					).trim()
		}
		echo "releasedVersion: ${releasedVersion}"

		currentBuild.displayName = "${artifactName}.${releasedVersion}"

		build(applicationDir, releasedVersion)
		allTests(applicationDir, releasedVersion)
		processCodeCoverage(applicationDir, releasedVersion, utils)
		sonarScanner(applicationDir, releasedVersion, utils)
		allCodeQualityTests(utils)
		dockerBuild(applicationDir, artifactName,  releasedVersion, utils)
		utils.pushImage(artifactName, releasedVersion, dockerRegistryIP)             					// Push Image to Private Repository
		utils.removeImages(artifactName)  																// To clean images created on Jenkins BOX
		tagBranch(applicationDir, apiRepoUrl, releasedVersion, GIT_TAG, utils)

		for (String devServerIP : devServerIPString.split(",")) {
			stage("deploy to DEV: ${devServerIP}"){
				utils.stopContainer(artifactName, devServerIP)
				deployImage(artifactName, releasedVersion, "dev", devServerIP, utils, dockerRegistryIP)
				dockerClean(artifactName, devServerIP, utils)											// To clean images created on DEV BOX
				subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' on ${devServerIP}"
				bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] on ${devServerIP}':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
				utils.sendEmailNotification(subjectText, bodyText)
			}
		}
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		// currentBuild.result = 'FAILURE'
		subjectText = "JENKINS Notification: FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
		throw error
	}
}

//--------------------------------------------------------- QA PRIMARY APPROVAL CHECK BEGIN ---------------------------------------------------------

echo "qaReleaseCandidate Value: ${qaReleaseCandidate}"
if (qaReleaseCandidate?.trim() && qaReleaseCandidate.toBoolean()) {
	echo "${releasedVersion} got primary approval to deploy to QA"
} else {
	echo "As per Input, Not Proceeding with QA Deployment."
	return
}

//--------------------------------------------------------- QA PRIMARY APPROVAL CHECK END ---------------------------------------------------------


//--------------------------------------------------------- QA  SECONDARY APPROVAL CHECK BEGIN ---------------------------------------------------------
//Show a Jenkins pipeline stage as failed without failing the whole job
try {
	stage('Deploy Approval - QA') {
		def deployOptions = 'no\nyes'
		userApprovalQAInput = input(
				id: 'userInput', message: 'Are you prepared to deploy?', parameters: [[$class: 'ChoiceParameterDefinition', choices: deployOptions, description: 'Approve/Disallow deployment', name: 'deploy-check']])
		echo "userApprovalQAInput: ${userApprovalQAInput}"


		if (qaReleaseCandidate.toBoolean() && userApprovalQAInput == 'yes') {
			echo "${releasedVersion} got secondary approval for QA Release."
		} else if (qaReleaseCandidate.toBoolean() && userApprovalQAInput == 'no'){
			echo "${releasedVersion} didn't get secondary approval for QA Release."
			error 'FAIL'    // Fails the Stage
		}
	}
} catch(error) {
	//currentBuild.result = 'UNSTABLE'
	echo "Exception: ${error}"
	echo "currentBuild.result: ${currentBuild.result}"
	isQADeployApproved = false
}
//--------------------------------------------------------- QA SECONDARY APPROVAL CHECK END ---------------------------------------------------------

//--------------------------------------------------------- QA  DEPLOYMENT BEGIN ---------------------------------------------------------
if (isQADeployApproved) {
	node {
		Utils utils = new Utils()
		try {
			def workspacePath = pwd()
			echo "workspacePath: ${workspacePath}"
			echo "artifactName: ${artifactName}"
			echo "releasedVersion: ${releasedVersion}"
			echo "qaServerIPString: ${qaServerIPString}"

			if (!qaServerIPString?.trim()) {
				error "Missing QA server IP in Build Parameters"
			}
			for (String qaServerIP : qaServerIPString.split(",")) {
				stage("deploy to QA: ${qaServerIP}") {
					utils.stopContainer(artifactName, qaServerIP)
					deployImage(artifactName, releasedVersion, "qa", qaServerIP, utils, dockerRegistryIP)
					dockerClean(artifactName, qaServerIP, utils)												//To clean images created on QA BOX
					subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' on ${qaServerIP}"
					bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] on ${qaServerIP}':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
					utils.sendEmailNotification(subjectText, bodyText)
				}
				
			}
		} catch (error) {
			println error
			// If there was an exception thrown, the build failed
			//currentBuild.result = 'FAILURE'
			subjectText = "JENKINS Notification: FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' for QA ENV"
			bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
			utils.sendEmailNotification(subjectText, bodyText)
			throw error
		}
	}
}
//--------------------------------------------------------- Utility Methods START ---------------------------------------------------------

def checkout(applicationDir, branchName, apiRepoUrl, utils) {
	stage('Git Checkout') {
		utils.sourceCodeCheckout(applicationDir, branchName, apiRepoUrl)
	}
}

def build(applicationDir, releasedVersion) {
	stage ('Maven Build') {
		dir(applicationDir) { sh "mvn clean install -Dmaven.test.skip=true -Drevision=${releasedVersion}" }
	}
}

def allTests(applicationDir, releasedVersion) {
	stage ('Junit Test') { dir(applicationDir) {sh "mvn test -Drevision=${releasedVersion}" }}
}

def processCodeCoverage(applicationDir, releasedVersion, utils) {
	stage('Cobertura Code Coverage') {
		utils.processCodeCoverage(applicationDir, releasedVersion)
	}
}

def sonarScanner(applicationDir, releasedVersion, utils) {
	stage('SonarQube Analysis') {
		utils.sonarScanner(applicationDir, releasedVersion)
	}
}

def allCodeQualityTests(utils) {
	stage("SonarQube Quality Gate") { utils.processQualityGate() }
}

def dockerBuild(applicationDir, artifactName,  releasedVersion, utils) {
	stage('Docker Build'){
		utils.apiDockerBuild(applicationDir, artifactName, releasedVersion)
	}
}

def tagBranch(applicationDir, apiRepoUrl, releasedVersion,GIT_TAG, utils) {
	if (GIT_TAG.toBoolean()) {
		stage('Tag Branch') {
			utils.tagBranch(applicationDir, apiRepoUrl, releasedVersion)
		}
		sh "docker images"
	}
}

def dockerClean(artifactName, serverIP, utils) {
	//stage('Docker Clean'){
	utils.removeDanglingImages(artifactName, serverIP)
	//}
}

def deployImage(artifactName, releasedVersion, PROP_ENV, destinationIP, utils, dockerRegistryIP) {
	utils.promoteAPIToEnv(artifactName, releasedVersion, PROP_ENV, destinationIP, dockerRegistryIP)
}
//--------------------------------------------------------- Utility Methods END ---------------------------------------------------------