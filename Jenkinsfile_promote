#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

/*
	This pipeline will PROMOTE "qualcomm-ms-priorityconfig", "qualcomm-ms-demandplanner", "demandplannerui" to User Provided Environments.
*/
node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'PROMOTE_ENV_IP', description: '', defaultValue: "", trim: true),
			choice(name: 'APPLICATION_NAME',choices: ["qualcomm-ms-priorityconfig", "qualcomm-ms-demandplanner", "demandplannerui"].join("\n"), description: 'Artifact Name'),
			string(name: 'APPLICATION_VERSION', description: '', defaultValue: "", trim: true),
			string(name: 'PROP_ENV', description: '', defaultValue: "", trim: true),
			string(name: 'PRIVATE_REPO_IP', description: 'Docker Images Private Repo', defaultValue: "10.0.31.225", trim: true),
		])
	]

	properties(projectProperties)
	Utils utils = new Utils()

	try {
		// =========== USER DEFINED VARS ===========
		def promoteEnvIPString = "${PROMOTE_ENV_IP}"
		def artifactName = "${APPLICATION_NAME}"
		def releasedVersion = "${APPLICATION_VERSION}"
		def propertiesEnv = "${PROP_ENV}"
		def dockerRegistryIP ="${PRIVATE_REPO_IP}"
		// =========== USER DEFINED VARS ===========

		currentBuild.displayName = "${artifactName}.${releasedVersion}_BD_${env.BUILD_NUMBER}"

		for (String promoteServerIP : promoteEnvIPString.split(",")) {
			stage("deploy to ${promoteServerIP}"){
				utils.pullDockerImage(artifactName, releasedVersion, promoteServerIP, dockerRegistryIP)
				utils.stopContainer(artifactName, promoteServerIP)
				dockerClean(artifactName, promoteServerIP, utils)											// To clean images created on PROMOTION BOX
				deployImage(artifactName, releasedVersion, propertiesEnv, promoteServerIP, utils, dockerRegistryIP)
				subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' on ${promoteServerIP}"
				bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] on ${promoteServerIP}':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
				utils.sendEmailNotification(subjectText, bodyText)
			}

		}
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		// currentBuild.result = 'FAILURE'
		subjectText = "JENKINS Notification: FAILED PROD Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
		throw error
	}
}

//--------------------------------------------------------- Utility Methods START ---------------------------------------------------------


def dockerClean(artifactName, serverIP, utils) {
	utils.removeDanglingImages(artifactName, serverIP)
}

def deployImage(artifactName, releasedVersion, PROP_ENV, destinationIP, utils, dockerRegistryIP) {
	if (artifactName == "qualcomm-ms-priorityconfig") {
		echo 'User Chosen ${artifactName}'
		utils.promotePCAPIToEnv(artifactName, releasedVersion, PROP_ENV, destinationIP, dockerRegistryIP)
	}else if(artifactName == "qualcomm-ms-demandplanner") {
		echo "User Chosen ${artifactName}"
		utils.promoteAPIToEnv(artifactName, releasedVersion, PROP_ENV, destinationIP, dockerRegistryIP)
	}else if(artifactName == "demandplannerui") {
		echo "User Chosen ${artifactName}"
		utils.promoteUIToEnv(artifactName, releasedVersion, PROP_ENV, destinationIP, dockerRegistryIP)
	}
}
//--------------------------------------------------------- Utility Methods END ---------------------------------------------------------