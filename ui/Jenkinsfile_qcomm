#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

// =========== GLOBAL VARS ===========
def dockerRegistryIP
// =========== GLOBAL VARS ===========

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'MAJOR_VERSION', description: '', defaultValue: "0", trim: true),
			string(name: 'MINOR_VERSION', description: '', defaultValue: "0", trim: true),
			string(name: 'GITHUB_USER_NAME', description: 'qualcomm git hub user name', defaultValue: "c-rsatti", trim: true, readonly: true),
			string(name: 'GIT_BRANCH', description: 'UI Branch Name', defaultValue: "", trim: true),
			booleanParam(name: 'GIT_TAG', defaultValue: false, description: 'Tagging required or not'),
			string(name: 'DOCKER_PRIVATE_REGISTRY_IP', description: 'Docker Private Registry', defaultValue: "ec2dp-devops2.qualcomm.com", trim: true)
		])
	]
	//clear.add(pipelineTriggers([cron('H 21 * * *')]))

	properties(projectProperties)

	Utils utils = new Utils()

	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		def nodeHome = tool 'NodeJS_V8'
		env.PATH="${env.PATH}:${nodeHome}/bin"
		def uiRepoUrl = 'https://A18591DIRPdp@innersource.accenture.com/scm/appq/demandplannerui.git'

		def artifactName = 'demandplannerui'
		def applicationDir = 'demandplannerui'
		def releasedVersion = "${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"
		def branchName = "${GIT_BRANCH}"
		dockerRegistryIP ="${DOCKER_PRIVATE_REGISTRY_IP}"
		// =========== USER DEFINED VARS ===========

		currentBuild.displayName = "${artifactName}:${releasedVersion}"
		echo "workspacePath: ${workspacePath}"

		// print a debug message which can be useful when things don't work
		echo """Job Parameters:
		MAJOR_VERSION                : ${MAJOR_VERSION}
		MINOR_VERSION                : ${MINOR_VERSION}
		GITHUB_USER_NAME             : ${GITHUB_USER_NAME}
		GIT_BRANCH	                 : ${GIT_BRANCH}
		GIT_TAG                      : ${GIT_TAG}
		DOCKER_PRIVATE_REGISTRY_IP   : ${dockerRegistryIP}"""
		
		if (!GIT_BRANCH?.trim() || !dockerRegistryIP?.trim() || !MAJOR_VERSION?.trim() || !MINOR_VERSION?.trim()) {
			currentBuild.result = 'FAILURE'
			error 'Missing required Build Parameters'
		}

		stage('Git Checkout') {
			utils.sourceCodeCheckout(applicationDir, branchName, uiRepoUrl)
		}

		stage('NPM Build') {
			//'demandplannerui_npmbuild' folder will have ng build generated 'dist' folder(To avoid putting 'dist' folder in  'demandplannerui').
			utils.npmBuild('demandplannerui_npmbuild', branchName, uiRepoUrl)
		}

		stage('SonarQube Analysis') { utils.uiCodeQualityAnalysis('demandplannerui_npmbuild', releasedVersion) }

		stage("SonarQube Quality Gate") { utils.processQualityGate() }

		stage('Docker Build') {
			utils.uiDockerBuild(applicationDir, artifactName, releasedVersion)
		}
		tagBranch(applicationDir, uiRepoUrl, releasedVersion, GIT_TAG, utils)
		utils.pushImage(artifactName, releasedVersion, dockerRegistryIP)										// Push Image to Private Repository
		utils.removeImages(artifactName)  																		// To clean images created on Jenkins BOX

		subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		// currentBuild.result = 'FAILURE'
		subjectText = "JENKINS Notification: FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
		throw error
	}
}

//--------------------------------------------------------- Utility Methods START ---------------------------------------------------------
def tagBranch(applicationDir, uiRepoUrl, releasedVersion,GIT_TAG, utils) {
	if (GIT_TAG.toBoolean()) {
		stage('Tag Branch') {
			utils.tagBranch(applicationDir, uiRepoUrl, releasedVersion)
		}
	}
}
//--------------------------------------------------------- Utility Methods END -----------------------------------------------------------