#!/usr/bin/env groovy
@Library('JenkinsSharedLibrary') _

// =========== GLOBAL VARS ===========
def artifactName, releasedVersion , qaServerIPString, distroDirPath, userApprovalQAInput, isQADeployApproved = true
// =========== GLOBAL VARS ===========

node {
	def projectProperties = [
		[$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			string(name: 'MAJOR_VERSION', description: '', defaultValue: "0", trim: true),
			string(name: 'MINOR_VERSION', description: '', defaultValue: "SNAPSHOT", trim: true),
			string(name: 'GIT_BRANCH', description: 'UI Branch Name', defaultValue: "develop", trim: true),
			string(name: 'DEV_BOX_IP', description: 'Comma separated servers IP', defaultValue: "10.0.31.138", trim: true),
			booleanParam(name: 'QA_RELEASE_CANDIDATE', defaultValue: false, description: 'Promote to QA or Not'),
			string(name: 'QA_BOX_IP', description: 'Comma separated servers IP', defaultValue: "10.0.31.242", trim: true),
			booleanParam(name: 'GIT_IMAGE_PUSH', defaultValue: false,	description: 'Save image to a tar archive'),
			booleanParam(name: 'GIT_TAG', defaultValue: false, description: 'Tagging required or not')
		]),
	]
	//projectProperties.add(pipelineTriggers([cron('H 21 * * *')]))

	properties(projectProperties)

	Utils utils = new Utils()

	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		def nodeHome = tool 'NodeJS_V8'
		env.PATH="${env.PATH}:${nodeHome}/bin"
		def uiRepoUrl = 'ssh://git@innersource.accenture.com/appq/demandplannerui.git'
		def distroRepoUrl = 'ssh://git@innersource.accenture.com/appq/distro_ui.git'

		// "/product/jenkins" folder should exist and have jenkins user permissions.
		distroDirPath = "/product/jenkins/distro_ui" //"/tmp/jenkins/distro_ui"

		artifactName = 'demandplannerui'
		def applicationDir = 'demandplannerui'
		releasedVersion = "${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"
		def branchName = "${GIT_BRANCH}"
		def devServerIPString = "${DEV_BOX_IP}"
		qaReleaseCandidate = "${QA_RELEASE_CANDIDATE}"
		qaServerIPString = "${QA_BOX_IP}"
		// =========== USER DEFINED VARS ===========

		currentBuild.displayName = "${artifactName}.${releasedVersion}"
		echo "workspacePath: ${workspacePath}"

		if (!devServerIPString?.trim()) {
			error "Missing DEV server IP in Build Parameters"
		}

		stage('Git Checkout') {
			utils.sourceCodeCheckout(applicationDir, branchName, uiRepoUrl, distroDirPath, distroRepoUrl)
		}

		stage('NPM Build') {
			//'demandplannerui_npmbuild' folder will have ng build generated 'dist' folder(To avoid putting 'dist' folder in  'demandplannerui').
			utils.npmBuild('demandplannerui_npmbuild', branchName, uiRepoUrl)
		}

		stage('SonarQube Analysis') { utils.uiCodeQualityAnalysis('demandplannerui_npmbuild') }

		stage("SonarQube Quality Gate") { utils.processQualityGate() }

		utils.removeImages(artifactName)  // To clean images created on Jenkins BOX

		stage('Docker Build') {
			utils.uiDockerBuild(applicationDir, artifactName, releasedVersion)
		}

		saveImage(applicationDir, distroDirPath, artifactName, releasedVersion, GIT_IMAGE_PUSH, utils)
		tagBranch(applicationDir, uiRepoUrl, releasedVersion, GIT_TAG, utils)

		// TODO: remove the tar files from server /home directory :
		// TODO: try to execute Shell Script on Server : https://medium.com/devopslinks/a-hacky-hackers-guide-to-hacking-together-jenkins-scripted-pipelines-part-3-aca73bd33eaa
		for (String devServerIP : devServerIPString.split(",")) {
			dockerClean(artifactName, devServerIP, utils)
			loadImage(distroDirPath, artifactName, releasedVersion, devServerIP, utils)
			stage("deploy to DEV: ${devServerIP}"){
				utils.stopContainer(artifactName, devServerIP)
				deployImage(artifactName, releasedVersion, "dev", devServerIP, utils)

				subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' on ${devServerIP}"
				bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] on ${devServerIP}':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
				utils.sendEmailNotification(subjectText, bodyText)
			}
		}

	}catch (error) {
		println error
		// If there was an exception thrown, the build failed
		// currentBuild.result = 'FAILURE'
		subjectText = "JENKINS Notification: FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
		utils.sendEmailNotification(subjectText, bodyText)
		throw error
	}
}

//--------------------------------------------------------- QA PRIMARY APPROVAL CHECK BEGIN ---------------------------------------------------------

if (qaReleaseCandidate.toBoolean()) {
	echo "${releasedVersion} got primary approval to deploy to QA"
} else {
	echo "As per Input, Not Proceeding with QA Deployment."
	return
}

//--------------------------------------------------------- QA PRIMARY APPROVAL CHECK END ---------------------------------------------------------

/*
 stage('Deploy Approval -QA ') {
 def userInput = input(
 id: 'deployToQA', message: 'Do you wish to promote build to QA?', ok: 'ok', parameters: [string(defaultValue: 'Approved', description: '', name: 'Deploy Approval?')])
 echo ("Deploy Approval: " + userInput)
 }
 */

//--------------------------------------------------------- QA  SECONDARY APPROVAL CHECK BEGIN ---------------------------------------------------------
//Show a Jenkins pipeline stage as failed without failing the whole job
try {
	stage('Deploy Approval - QA') {
		def deployOptions = 'no\nyes'
		userApprovalQAInput = input(
				id: 'userInput', message: 'Are you prepared to deploy?', parameters: [[$class: 'ChoiceParameterDefinition', choices: deployOptions, description: 'Approve/Disallow deployment', name: 'deploy-check']])
		echo "userApprovalQAInput: ${userApprovalQAInput}"
	

		if (qaReleaseCandidate.toBoolean() && userApprovalQAInput == 'yes') {
			echo "${releasedVersion} got secondary approval for QA Release."
		} else if (qaReleaseCandidate.toBoolean() && userApprovalQAInput == 'no'){
			echo "${releasedVersion} didn't get secondary approval for QA Release."
			error 'FAIL'    // Fails the Stage
		}
	}	
} catch(error) {
	//currentBuild.result = 'UNSTABLE'
	echo "${error}"
	echo "currentBuild.result: ${currentBuild.result}"
	isQADeployApproved = false
}
//--------------------------------------------------------- QA SECONDARY APPROVAL CHECK END ---------------------------------------------------------


//--------------------------------------------------------- QA  DEPLOYMENT BEGIN ---------------------------------------------------------
if (isQADeployApproved) {
	node {
		Utils utils = new Utils()
		try {
			def workspacePath = pwd()
			echo "QA workspacePath: ${workspacePath}"
			echo "artifactName: ${artifactName}"
			echo "releasedVersion: ${releasedVersion}"
			echo "qaServerIPString: ${qaServerIPString}"
			echo "distroDirPath: ${distroDirPath}"

			if (!qaServerIPString?.trim()) {
					error "Missing QA server IP in Build Parameters"
			}
			
			for (String qaServerIP : qaServerIPString.split(",")) {
				stage("deploy to QA: ${qaServerIP}") {
					dockerClean(artifactName, qaServerIP, utils)
					loadImage(distroDirPath, artifactName, releasedVersion, qaServerIP, utils)
					utils.stopContainer(artifactName, qaServerIP)
					deployImage(artifactName, releasedVersion, "qa", qaServerIP, utils)

					subjectText = "JENKINS Notification: Successful Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' on ${qaServerIP}"
					bodyText = """ <p>Successful: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] on ${qaServerIP}':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
					utils.sendEmailNotification(subjectText, bodyText)
				}
			}
		} catch (error) {
			println error
			// If there was an exception thrown, the build failed
			//currentBuild.result = 'FAILURE'
			subjectText = "JENKINS Notification: FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' for QA ENV"
			bodyText = """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p><p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
			utils.sendEmailNotification(subjectText, bodyText)
			throw error
		}
	}
}
//--------------------------------------------------------- QA  DEPLOYMENT END ---------------------------------------------------------


//--------------------------------------------------------- Utlity Methods START ---------------------------------------------------------
def saveImage(applicationDir, distroDirPath, artifactName, releasedVersion, GIT_IMAGE_PUSH, utils) {
	stage('Save Image to Tar Archive') {
		utils.saveImage(applicationDir, distroDirPath, artifactName, releasedVersion, GIT_IMAGE_PUSH)
	}
}

def tagBranch(applicationDir, uiRepoUrl, releasedVersion,GIT_TAG, utils) {
	if (GIT_TAG.toBoolean()) {
		stage('Tag Branch') {
			utils.tagBranch(applicationDir, uiRepoUrl, releasedVersion)
		}
		sh "docker images"
	}
}

def dockerClean(artifactName, serverIP, utils) {
	//stage('Docker Clean'){
	utils.removeDanglingImages(artifactName, serverIP)
	//}
}

def loadImage(distroDirPath, artifactName, releasedVersion, destinationIP, utils) {
	//stage('load Image'){
	utils.loadImage(distroDirPath, artifactName, releasedVersion, destinationIP)
	//}
}

def deployImage(artifactName, releasedVersion, PROP_ENV, destinationIP, utils) {
	utils.promoteUIToEnv(artifactName, releasedVersion, PROP_ENV, destinationIP)
}//--------------------------------------------------------- Utlity Methods END ---------------------------------------------------------