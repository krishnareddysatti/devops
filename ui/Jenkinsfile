#!/usr/bin/env groovy

node {
	properties([
		[$class: 'BuildDiscarderProperty', strategy:
			[$class: 'LogRotator', numToKeepStr: '3']],
		disableConcurrentBuilds(),
		parameters([
			choice(choices: ["feature/ngbuildfix", "develop", "master"].join("\n"), description: 'API Branch Name', name: 'UI_GIT_BRANCH'),
			choice(choices: ["master", "develop"].join("\n"), description: 'Distro Branch Name', name: 'DISTRO_GIT_BRANCH'),
			choice(choices: ["dev", "qa"].join("\n"), description: 'Properties Environment', name: 'PROP_ENV'),
			booleanParam(name: 'GIT_IMAGE_PUSH', defaultValue: false,	description: 'Image store required or not'),
			booleanParam(name: 'GIT_TAG', defaultValue: false, description: 'Tagging required or not')
		]),
		pipelineTriggers([
			//pollSCM('H/15 * * * *'),
			//pollSCM('* * * * *'),
			//cron('@daily')
		])
	])


	try {
		// =========== USER DEFINED VARS ===========
		def workspacePath = pwd()
		def nodeHome = tool 'NodeJS_V8'
		env.PATH="${env.PATH}:${nodeHome}/bin"
		def uiRepoUrl = 'ssh://git@innersource.accenture.com/appq/demandplannerui.git'
		def distroRepoUrl = 'ssh://git@innersource.accenture.com/appq/distro.git'
		def distroDirPath = "/tmp/jenkins/distro"
		def sonarqubeScannerHome = tool 'SonarQubeScanner_V3'
		def artifactName = 'demandplannerui'
		// TODO: dynamically fetch from package.json
		def releasedVersion ='0.1'
		// =========== USER DEFINED VARS ===========

		stage('Git Checkout') {
			deleteDir()
			echo "Checkout in progress..."
			dir('demandplannerui') {
				git branch: '${UI_GIT_BRANCH}',
				credentialsId: 'git-repo-ssh-access',
				url: "${uiRepoUrl}"
			}

			// Check for directory
			if(!fileExists(distroDirPath))
			{
				echo "${distroDirPath} doesn't exist.Continue cloning ..."

				dir(distroDirPath){
					git branch: '${DISTRO_GIT_BRANCH}',
					credentialsId: 'git-repo-ssh-access',
					url: "${distroRepoUrl}"
				}
			}
			else {
				echo "${distroDirPath} is already exist.Continue updating ..."
				sshagent (credentials: ['git-repo-ssh-access']) {
					dir(distroDirPath) { sh "git pull origin HEAD:master" }
				}
			}
		}

		//As per other experiences, ng build in jenkins file doesn't work as expected. So moved to docker file
		//This stage installs all of the node dependencies, performs linting and builds the code.
		stage('NPM Build') {
			//npm install -g npm@4.0.3 @angular/cli@1.0.4
			//npm install -g npm@5.6.0 @angular/cli@~1.7.3
			// TODO: //ng lint Update her about ng lint
			try {
				dir('demandplannerui') { sh '''
						 node --version
						 npm --version
						 npm install -g npm@5.6.0 @angular/cli@~1.7.3
						 npm install
						 ng build --prod --aot
					'''   }
			}catch (err) {
				echo "NPM Build Stage Caught: ${err}"
			}
		}

		// TODO: skipping testing as of now
		// TODO: npm test make necessary changes.Launching browser ChromeHeadless
		/*
		 stage ('NPM Test') {
		 dir('demandplannerui') {
		 try {sh 'npm test' }catch (err) {
		 echo " NPM Test Stage Caught: ${err}"
		 }}
		 }*/

		/* TODO: parameterize project version
		 * " -Dsonar.projectKey=demo:demandplannerui"+
		 * " -Dsonar.projectName=demandplannerui" +
		 * " -Dsonar.projectVersion=V1" +
		 *
		 * add below line after "to include test"
		 *
		 */
		// " -Dsonar.test.inclusions=**/*.spec.ts" +

		stage('SonarQube Analysis') {
			dir('demandplannerui') {
				withSonarQubeEnv('SonarQube_V7') {
					sh 'ls -l'
					sh "${sonarqubeScannerHome}/bin/sonar-scanner"+
							" -Dsonar.projectKey=demandplannerui"+
							" -Dsonar.sources=src" +
							" -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts" +
							" -Dsonar.tests=src" +
							" -Dsonar.test.inclusions=**/*.spec.ts"
							" -Dsonar.ts.tslintconfigpath=tslint.json" +
							" -Dsonar.ts.lcov.reportpath=test-results/coverage/coverage.lcov" +
							" -Dsonar.sourceEncoding=UTF-8"
				}
			}
		}

		// Configure a webhook in your SonarQube server pointing to <your Jenkins instance>/sonarqube-webhook/
		stage("SonarQube Quality Gate") {
			// Just in case something goes wrong, pipeline will be killed after a timeout
			timeout(time: 2, unit: 'MINUTES') {
				def qualityGate = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
				if (qualityGate.status != 'OK') {
					//error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
					println("SonarQube Quality Gate Failed.failure: ${qualityGate.status}")
				} else
				{
					println("SonarQube Quality Gate Passed")
				}
			}
		}

		stage('Docker Clean'){
			try {
				sh 'docker rmi -f $(docker images -f "dangling=true" -q)'
			} catch (err) {
				echo "Trying to remove dangling Images: ${err}"
			}

			try {
				sh 'docker rmi -f $(docker images | grep ${artifactName} | awk \"{print $3}\")'
			} catch (err) {
				echo "Trying remove ${artifactName}: ${err}"
			}
		}

		stage('Docker Build'){
			dir('demandplannerui') {
				echo "Starting Docker Image Creation..."
				sh "docker build -t ${artifactName}:${releasedVersion} ."
				echo "Docker Image Creation Complted..."
			}
		}

		if (GIT_IMAGE_PUSH.toBoolean()) {
			sshagent (credentials: ['git-repo-ssh-access']) {
				//Save one or more images to a tar archive.
				stage('Save Docker Image'){
					sh "docker images"
					dir ('demandplannerui') {
						//docker save -o <path for generated tar file> <existing image name>
						sh "docker save -o ${artifactName}-${releasedVersion}.tar ${artifactName}:${releasedVersion}"
						echo "Copying tar file..."
						sh "cp -rf ${artifactName}-${releasedVersion}.tar ${distroDirPath}"
					}

					dir (distroDirPath) {
						sh "git pull origin master"
						sh "git add ${artifactName}-${releasedVersion}.tar"
						sh 'git commit -m "Jenkins Job:${JOB_NAME} pushing image tar file"'
						sh "git push origin HEAD:master"
					}
				}


			}
		}

		if (GIT_TAG.toBoolean()) {
			sshagent (credentials: ['git-repo-ssh-access']) {
				stage('Tag Branch'){
					dir('demandplannerui') {
						sh "ls -l"
						sh "git remote set-url origin ${uiRepoUrl}"
						//sh "git tag ${IMAGE_BRANCH_PREFIX}-${BUILD_NUMBER}"
						sh "git tag ${releasedVersion}-${BUILD_NUMBER}"
						sh "git push --tags"
					}
				}
			}
			sh "docker images"
		}

		//docker ps -a -q --filter=ancestor=sonarqube | xargs -I {} docker stop {}
		//docker ps -a -q --filter=ancestor=sonarqube | xargs -I {} docker rm {}

		stage('deploy to DEV'){
			sh "docker ps"
			def  containerId = sh (
					script: "docker ps --no-trunc -aqf 'name=${artifactName}'",
					returnStdout: true
					).trim()
			echo "containerId: ${containerId}"

			if (containerId != "") {
				sh "docker stop ${containerId}"
				sh "docker rm -f ${containerId}"
			}

			//docker run -it -p 8080:80 angular-sample-app
			//sh "docker run -e 'SPRING_PROFILES_ACTIVE=${PROP_ENV}' -d -p 8099:8090 --name  ${artifactName} -t ${artifactName}"
			sh "docker run -d -p 8098:80 --name  ${artifactName} -t ${artifactName}:${releasedVersion}"
		}
	}catch (Error) {
		println Error
		// TODO: 'to' field put distribution list
		println Error
		currentBuild.result = "FAILURE"
		emailext(
				subject: "JENKINS Notification : FAILED Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
				body: """ <p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
					      <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>
					  """,
				recipientProviders: [culprits(), developers(), requestor(), brokenTestsSuspects(), brokenBuildSuspects(), upstreamDevelopers()],
				to: 'r.satti@accenture.com, sashi.kumar.sharma@accenture.com, shresthi.garg@accenture.com, suresh.kumar.sahoo@accenture.com'
				)
	}
}